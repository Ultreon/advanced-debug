//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrDeprecatedAPIUsage
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version rootProject.version

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        data {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/main/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=advanced_debug"
   //         vmArg "-Dfabric-api.datagen.strict-validation"
            runDir "build/datagen"
        }
    }
}

repositories {
    maven { url = "https://cursemaven.com" }
    maven { url "https://maven.terraformersmc.com/releases" }
    mavenCentral()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modApi "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:$architectury_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:$forge_config_api_port_version"
    modImplementation "com.electronwill.night-config:core:$nightconfig_version"
    modImplementation "com.electronwill.night-config:toml:$nightconfig_version"

    modImplementation "com.terraformersmc:modmenu:$modmenu_version", {
        exclude module: "fabric-api"
    }

    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"
}

processResources {
    inputs.property "version", rootProject.version

    filesMatching("fabric.mod.json") {
        HashMap<String, ?> p = new HashMap<>()
        p.put("version", rootProject.version)
        p.put("description", rootProject.getModDescription())
        p.put("loaderVersion", rootProject.fabric_loader_version)
        p.put("minecraftVersion", rootProject.architectury.minecraft)
        expand(p)
    }

    from "$rootProject.projectDir/LICENSE"
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}